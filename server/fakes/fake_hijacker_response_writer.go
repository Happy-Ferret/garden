// This file was generated by counterfeiter
package fakes

import (
	"bufio"
	"net"
	"net/http"
	"sync"

	"github.com/cloudfoundry-incubator/garden/server"
)

type FakeHijackerResponseWriter struct {
	HeaderStub        func() http.Header
	headerMutex       sync.RWMutex
	headerArgsForCall []struct{}
	headerReturns     struct {
		result1 http.Header
	}
	WriteStub        func([]byte) (int, error)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		arg1 []byte
	}
	writeReturns struct {
		result1 int
		result2 error
	}
	WriteHeaderStub        func(int)
	writeHeaderMutex       sync.RWMutex
	writeHeaderArgsForCall []struct {
		arg1 int
	}
	HijackStub        func() (net.Conn, *bufio.ReadWriter, error)
	hijackMutex       sync.RWMutex
	hijackArgsForCall []struct{}
	hijackReturns     struct {
		result1 net.Conn
		result2 *bufio.ReadWriter
		result3 error
	}
}

func (fake *FakeHijackerResponseWriter) Header() http.Header {
	fake.headerMutex.Lock()
	fake.headerArgsForCall = append(fake.headerArgsForCall, struct{}{})
	fake.headerMutex.Unlock()
	if fake.HeaderStub != nil {
		return fake.HeaderStub()
	} else {
		return fake.headerReturns.result1
	}
}

func (fake *FakeHijackerResponseWriter) HeaderCallCount() int {
	fake.headerMutex.RLock()
	defer fake.headerMutex.RUnlock()
	return len(fake.headerArgsForCall)
}

func (fake *FakeHijackerResponseWriter) HeaderReturns(result1 http.Header) {
	fake.HeaderStub = nil
	fake.headerReturns = struct {
		result1 http.Header
	}{result1}
}

func (fake *FakeHijackerResponseWriter) Write(arg1 []byte) (int, error) {
	fake.writeMutex.Lock()
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		arg1 []byte
	}{arg1})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(arg1)
	} else {
		return fake.writeReturns.result1, fake.writeReturns.result2
	}
}

func (fake *FakeHijackerResponseWriter) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeHijackerResponseWriter) WriteArgsForCall(i int) []byte {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.writeArgsForCall[i].arg1
}

func (fake *FakeHijackerResponseWriter) WriteReturns(result1 int, result2 error) {
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeHijackerResponseWriter) WriteHeader(arg1 int) {
	fake.writeHeaderMutex.Lock()
	fake.writeHeaderArgsForCall = append(fake.writeHeaderArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.writeHeaderMutex.Unlock()
	if fake.WriteHeaderStub != nil {
		fake.WriteHeaderStub(arg1)
	}
}

func (fake *FakeHijackerResponseWriter) WriteHeaderCallCount() int {
	fake.writeHeaderMutex.RLock()
	defer fake.writeHeaderMutex.RUnlock()
	return len(fake.writeHeaderArgsForCall)
}

func (fake *FakeHijackerResponseWriter) WriteHeaderArgsForCall(i int) int {
	fake.writeHeaderMutex.RLock()
	defer fake.writeHeaderMutex.RUnlock()
	return fake.writeHeaderArgsForCall[i].arg1
}

func (fake *FakeHijackerResponseWriter) Hijack() (net.Conn, *bufio.ReadWriter, error) {
	fake.hijackMutex.Lock()
	fake.hijackArgsForCall = append(fake.hijackArgsForCall, struct{}{})
	fake.hijackMutex.Unlock()
	if fake.HijackStub != nil {
		return fake.HijackStub()
	} else {
		return fake.hijackReturns.result1, fake.hijackReturns.result2, fake.hijackReturns.result3
	}
}

func (fake *FakeHijackerResponseWriter) HijackCallCount() int {
	fake.hijackMutex.RLock()
	defer fake.hijackMutex.RUnlock()
	return len(fake.hijackArgsForCall)
}

func (fake *FakeHijackerResponseWriter) HijackReturns(result1 net.Conn, result2 *bufio.ReadWriter, result3 error) {
	fake.HijackStub = nil
	fake.hijackReturns = struct {
		result1 net.Conn
		result2 *bufio.ReadWriter
		result3 error
	}{result1, result2, result3}
}

var _ server.HijackerResponseWriter = new(FakeHijackerResponseWriter)
